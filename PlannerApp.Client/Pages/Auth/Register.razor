@page "/auth/register"
@layout AuthLayout
@using PlannerApp.Shared.Models
@inject AuthenticationService authService
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-12">
        <h2>Create a new account</h2>
        <EditForm Model="registerModel" OnValidSubmit="RegisterUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>First name</label>
                <RadzenTextBox @bind-Value="registerModel.FirstName"></RadzenTextBox>
                <label>Last name</label>
                <RadzenTextBox @bind-Value="registerModel.LastName"></RadzenTextBox>
                <label>Email Address</label>
                <RadzenTextBox @bind-Value="registerModel.Email"></RadzenTextBox>
                <label>Password</label>
                <RadzenPassword @bind-Value="registerModel.Password"></RadzenPassword>
                <label>Confirm Password</label>
                <RadzenPassword @bind-Value="registerModel.ConfirmPassword"></RadzenPassword>
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Register" ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Login" ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToLogin" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    RegisterRequest registerModel = new RegisterRequest();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public async Task RegisterUser()
    {
        isBusy = true;

        var result = await authService.RegisterUserAsync(registerModel);
        if (result.IsSuccess)
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Errors.FirstOrDefault() ?? result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    void GoToLogin()
    {
        navigationManager.NavigateTo("/auth/login");
    }
}
