@page "/auth/login"
@layout AuthLayout
@using PlannerApp.Shared.Models
@inject AuthenticationService authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider authenticationStateProvider

<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>
        <EditForm Model="loginModel" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email Address</label>
                <RadzenTextBox @bind-Value="loginModel.Email"></RadzenTextBox>
                <label>Password</label>
                <RadzenPassword @bind-Value="loginModel.Password"></RadzenPassword>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login" ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register" ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToRegister" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest loginModel = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public async Task LoginUser()
    {
        isBusy = true;

        var result = await authService.LoginUserAsync(loginModel);
        if (result.IsSuccess)
        {
            var userInfo = new PlannerApp.Client.Models.LocalUserInfo()
            {
                AccessToken = result.Message,
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
                Email = result.UserInfo[System.Security.Claims.ClaimTypes.Email],
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register");
    }
}
