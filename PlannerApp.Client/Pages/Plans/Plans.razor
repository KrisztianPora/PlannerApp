@page "/plans"
@page "/plans/{pageNumber:int}"
@attribute [Authorize]
@inject PlansService plansService
@inject NavigationManager navigationManager

@if (isBusy)
{
    <div class="spinner"></div>
}
else
{
    <div class="row justify-content-between align-items-center px-3">
        <div class="col-md-auto">
            <h1>My Plans</h1>
        </div>
        <div class="col-md-auto">
            <RadzenTextBox Placeholder="Search for plans" @bind-Value="Query" Style="vertical-align: top;" /> 
            &nbsp; 
            <RadzenButton Text="Search" Click="async () => await getPlansAsync()" Style="vertical-align: top;"/>
        </div>
    </div>
        <hr />

    <div class="container-fluid">
        <div class="row justify-content-center">
                @foreach (var plan in plans)
                {
                        <RadzenCard Style="color:black; margin:10px; width: 350px;">
                            <img src="@plan.CoverPath" class="img-fluid" />
                            <a href="/editplan/@plan.Id">@plan.Title</a>
                            <p>@plan.Description</p>
                            <hr />
                            <div class="row">
                                <div class="col-6">
                                    <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Text="Edit"  class="btn-block"
                                                  Click='() => navigationManager.NavigateTo("/editplan/" + plan.Id)' />
                                </div>
                                <div class="col-6">
                                    <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete"  class="btn-block"
                                                  Click="() => selectPlan(plan.Id)" />
                                </div>
                            </div>
                            @if (selectedPlanId == plan.Id)
                            {
                                <hr />
                                <div class="row">
                                    <div class="col-12">
                                        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="Confirm" class="btn-block"
                                        Click="async () => await DeletePlanAsync()" />
                                    </div>
                                    
                                </div>
                            }
                        </RadzenCard>
                }
        </div>
    </div>

    <hr />
    <div class="row px-3 pb-3">
            @for (int i = 1; i <= totalPages; i++)
            {
                int page = i;
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Disabled="@(page == PageNumber)" Style="margin:8px;" />
            }
    </div>
}

@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    bool isBusy = false;
    List<Plan> plans = new List<Plan>();

    int totalPages = 1;

    string selectedPlanId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await getPlansAsync();
    }

    async Task getPlansAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        plansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        if (PageNumber == null)
        {
            PageNumber = 1;
        }

        PlansCollectionPagingResponse result;

        if (string.IsNullOrWhiteSpace(Query))
        {
            result = await plansService.GetAllPlansByPageAsync(PageNumber.Value);
        }
        else
        {
            result = await plansService.SearchPlansByPageAsync(Query, PageNumber.Value);
        }

        if (result.Count % result.PageSize == 0)
        {
            totalPages = result.Count / result.PageSize;
        }
        else
        {
            totalPages = (result.Count / result.PageSize) + 1;
        }

        plans = result.Records.ToList();

        isBusy = false;
    }

    async Task moveToPageAsync(int pageNumber)
    {
        PageNumber = pageNumber;
        await getPlansAsync();
    }

    void selectPlan(string id)
    {
        selectedPlanId = id;
    }

    async Task DeletePlanAsync()
    {
        isBusy = true;

        var result = await plansService.DeletePlanAsync(selectedPlanId);
        if (result.IsSuccess)
        {
            var deletedPlan = plans.SingleOrDefault(p => p.Id == selectedPlanId);
            plans.Remove(deletedPlan);
        }
        else
        {
            await getPlansAsync();
        }

        isBusy = false;
    }
}
